version: '3.8'

services:
  # Core Services
  redis:
    image: redis:7.2-alpine
    container_name: auraos-redis-prod
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: auraos-prometheus-prod
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  grafana:
    image: grafana/grafana:10.2.0
    container_name: auraos-grafana-prod
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
    depends_on:
      - prometheus
    restart: unless-stopped

  # AuraOS Services
  conversational-core:
    build:
      context: .
      dockerfile: services/templates/conversational-core/Dockerfile
    container_name: auraos-conversational-core-prod
    ports:
      - "8001:8000"
    environment:
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - PROMETHEUS_PORT=8000
      - ENVIRONMENT=production
      - DEBUG=false
      - WORKERS=4
    depends_on:
      - redis
      - prometheus
    volumes:
      - ./services/templates/conversational-core:/app
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  file-organizer:
    build:
      context: .
      dockerfile: services/templates/file-organizer/Dockerfile
    container_name: auraos-file-organizer-prod
    ports:
      - "8002:8000"
    environment:
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - PROMETHEUS_PORT=8000
      - ENVIRONMENT=production
      - DEBUG=false
      - WORKERS=4
      - UPLOAD_DIR=/app/uploads
    depends_on:
      - redis
      - prometheus
    volumes:
      - ./services/templates/file-organizer:/app
      - file_uploads:/app/uploads
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  ide-agent:
    build:
      context: .
      dockerfile: services/templates/ide-agent/Dockerfile
    container_name: auraos-ide-agent-prod
    ports:
      - "8003:8000"
    environment:
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - PROMETHEUS_PORT=8000
      - ENVIRONMENT=production
      - DEBUG=false
      - WORKERS=4
    depends_on:
      - redis
      - prometheus
    volumes:
      - ./services/templates/ide-agent:/app
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Production Nginx
  nginx:
    image: nginx:alpine
    container_name: auraos-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    depends_on:
      - conversational-core
      - file-organizer
      - ide-agent
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Log aggregation
  loki:
    image: grafana/loki:2.9.0
    container_name: auraos-loki-prod
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    restart: unless-stopped

  promtail:
    image: grafana/promtail:2.9.0
    container_name: auraos-promtail-prod
    volumes:
      - ./monitoring/promtail.yml:/etc/promtail/config.yml
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    restart: unless-stopped

volumes:
  redis_data:
  prometheus_data:
  grafana_data:
  file_uploads:
  nginx_logs:
  loki_data:

networks:
  default:
    name: auraos-network-prod