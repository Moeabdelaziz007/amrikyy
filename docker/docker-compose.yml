# AuraOS Docker Compose - إعداد متعدد الحاويات
version: '3.8'

services:
  # الخدمة الرئيسية
  auraos:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: auraos-main
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - GOOGLE_AI_API_KEY=${GOOGLE_AI_API_KEY}
      - WEBHOOK_URL=${WEBHOOK_URL}
      - WEBHOOK_SECRET_TOKEN=${WEBHOOK_SECRET_TOKEN}
      - PORT=3000
    volumes:
      - ../logs:/app/logs
      - ../reports:/app/reports
    depends_on:
      - prometheus
      - grafana
    networks:
      - auraos-network
    healthcheck:
      test: ["CMD", "node", "health-check.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Prometheus للمراقبة
  prometheus:
    image: prom/prometheus:latest
    container_name: auraos-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - auraos-network

  # Grafana للوحات التحكم
  grafana:
    image: grafana/grafana:latest
    container_name: auraos-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - auraos-network

  # Redis للتخزين المؤقت
  redis:
    image: redis:7-alpine
    container_name: auraos-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - auraos-network

  # Nginx كـ reverse proxy
  nginx:
    image: nginx:alpine
    container_name: auraos-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - auraos
    networks:
      - auraos-network

  # PostgreSQL لقاعدة البيانات
  postgres:
    image: postgres:15-alpine
    container_name: auraos-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=auraos
      - POSTGRES_USER=${POSTGRES_USER:-auraos}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-auraos123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - auraos-network

volumes:
  prometheus_data:
  grafana_data:
  redis_data:
  postgres_data:

networks:
  auraos-network:
    driver: bridge
