#!/usr/bin/env ts-node

/**
 * AuraOS Configurator Agent
 * Intelligent environment variable management for AuraOS project
 * 
 * Commands:
 * - scan: Find all environment variables in source code
 * - generate-template: Create .env.example file
 * - validate: Check if .env file has all required variables
 */

import * as fs from 'fs';
import * as path from 'path';
import * as readline from 'readline';

interface EnvVariable {
  name: string;
  source: string;
  line: number;
}

class ConfiguratorAgent {
  private srcDir: string;
  private projectRoot: string;

  constructor() {
    this.projectRoot = process.cwd();
    this.srcDir = path.join(this.projectRoot, 'src');
  }

  /**
   * Scan all TypeScript files for environment variables
   */
  async scan(): Promise<EnvVariable[]> {
    console.log('üîç Scanning for environment variables...');
    
    const variables: EnvVariable[] = [];
    const files = this.getAllTsFiles(this.srcDir);
    
    for (const file of files) {
      try {
        const content = fs.readFileSync(file, 'utf-8');
        const lines = content.split('\n');
        
        lines.forEach((line, index) => {
          // Match import.meta.env.VITE_* patterns
          const viteMatches = line.match(/import\.meta\.env\.VITE_([A-Z_][A-Z0-9_]*)/g);
          if (viteMatches) {
            viteMatches.forEach(match => {
              const varName = match.replace('import.meta.env.VITE_', 'VITE_');
              variables.push({
                name: varName,
                source: path.relative(this.projectRoot, file),
                line: index + 1
              });
            });
          }
          
          // Match process.env.* patterns
          const processMatches = line.match(/process\.env\.([A-Z_][A-Z0-9_]*)/g);
          if (processMatches) {
            processMatches.forEach(match => {
              const varName = match.replace('process.env.', '');
              variables.push({
                name: varName,
                source: path.relative(this.projectRoot, file),
                line: index + 1
              });
            });
          }
        });
      } catch (error) {
        console.warn(`‚ö†Ô∏è  Could not read file: ${file}`);
      }
    }
    
    // Remove duplicates
    const uniqueVars = variables.filter((var1, index, self) => 
      index === self.findIndex(var2 => var2.name === var1.name)
    );
    
    console.log(`‚úÖ Found ${uniqueVars.length} unique environment variables`);
    return uniqueVars;
  }

  /**
   * Generate .env.example template file
   */
  async generateTemplate(): Promise<void> {
    console.log('üìù Generating .env.example template...');
    
    const variables = await this.scan();
    const envExamplePath = path.join(this.projectRoot, '.env.example');
    
    let content = `# AuraOS Environment Variables Template
# Generated by Configurator Agent
# Copy this file to .env and fill in your values

`;
    
    // Group variables by type
    const viteVars = variables.filter(v => v.name.startsWith('VITE_'));
    const processVars = variables.filter(v => !v.name.startsWith('VITE_'));
    
    if (viteVars.length > 0) {
      content += `# Vite Environment Variables (Frontend)
`;
      viteVars.forEach(variable => {
        content += `${variable.name}="YOUR_VALUE_HERE"\n`;
      });
      content += `\n`;
    }
    
    if (processVars.length > 0) {
      content += `# Node.js Environment Variables (Backend)
`;
      processVars.forEach(variable => {
        content += `${variable.name}="YOUR_VALUE_HERE"\n`;
      });
      content += `\n`;
    }
    
    // Add common AuraOS variables
    content += `# AuraOS Core Configuration
NODE_ENV="development"
PORT=3002
FRONTEND_URL="http://localhost:5173"

# Firebase Configuration
FIREBASE_PROJECT_ID="your-project-id"
FIREBASE_PRIVATE_KEY="your-private-key"
FIREBASE_CLIENT_EMAIL="your-client-email"

# AI Services
OPENAI_API_KEY="your-openai-api-key"
ANTHROPIC_API_KEY="your-anthropic-api-key"

# External APIs
WEATHER_API_KEY="your-weather-api-key"
GOOGLE_MAPS_API_KEY="your-google-maps-api-key"

# Security
JWT_SECRET="your-super-secret-jwt-key"
JWT_EXPIRES_IN="7d"

# Database
DATABASE_URL="your-database-url"

# Logging
LOG_LEVEL="info"
LOG_FILE="./logs/app.log"
`;
    
    fs.writeFileSync(envExamplePath, content);
    console.log(`‚úÖ Generated .env.example with ${variables.length} variables`);
    console.log(`üìÅ Template saved to: ${envExamplePath}`);
  }

  /**
   * Validate .env file against required variables
   */
  async validate(): Promise<void> {
    console.log('üîç Validating .env file...');
    
    const requiredVars = await this.scan();
    const envPath = path.join(this.projectRoot, '.env');
    
    if (!fs.existsSync(envPath)) {
      console.error('‚ùå .env file not found!');
      console.log('üí° Run: npm run env:template to generate .env.example');
      process.exit(1);
    }
    
    try {
      const envContent = fs.readFileSync(envPath, 'utf-8');
      const envLines = envContent.split('\n');
      const definedVars = new Set<string>();
      
      envLines.forEach(line => {
        const trimmed = line.trim();
        if (trimmed && !trimmed.startsWith('#')) {
          const [key] = trimmed.split('=');
          if (key) {
            definedVars.add(key.trim());
          }
        }
      });
      
      const missingVars = requiredVars.filter(variable => 
        !definedVars.has(variable.name)
      );
      
      if (missingVars.length === 0) {
        console.log('‚úÖ All required environment variables are defined!');
        console.log(`üìä Total variables: ${requiredVars.length}`);
      } else {
        console.log(`‚ùå Missing ${missingVars.length} environment variables:`);
        missingVars.forEach(variable => {
          console.log(`   ‚Ä¢ ${variable.name} (used in ${variable.source}:${variable.line})`);
        });
        console.log('\nüí° Add missing variables to your .env file');
        process.exit(1);
      }
    } catch (error) {
      console.error('‚ùå Error reading .env file:', error);
      process.exit(1);
    }
  }

  /**
   * Get all TypeScript files recursively
   */
  private getAllTsFiles(dir: string): string[] {
    const files: string[] = [];
    
    try {
      const entries = fs.readdirSync(dir, { withFileTypes: true });
      
      for (const entry of entries) {
        const fullPath = path.join(dir, entry.name);
        
        if (entry.isDirectory() && !entry.name.startsWith('.') && entry.name !== 'node_modules') {
          files.push(...this.getAllTsFiles(fullPath));
        } else if (entry.isFile() && (entry.name.endsWith('.ts') || entry.name.endsWith('.tsx'))) {
          files.push(fullPath);
        }
      }
    } catch (error) {
      console.warn(`‚ö†Ô∏è  Could not read directory: ${dir}`);
    }
    
    return files;
  }

  /**
   * Display help information
   */
  private showHelp(): void {
    console.log(`
üöÄ AuraOS Configurator Agent

Usage: npx ts-node ./scripts/env-agent.ts <command>

Commands:
  scan              Scan source code for environment variables
  generate-template Create .env.example template file
  validate          Validate .env file against required variables

Examples:
  npm run env:template    # Generate .env.example
  npm run env:validate    # Validate .env file

Security: This agent only reads variable names, never values.
`);
  }

  /**
   * Main execution method
   */
  async run(): Promise<void> {
    const command = process.argv[2];
    
    if (!command || command === 'help') {
      this.showHelp();
      return;
    }
    
    try {
      switch (command) {
        case 'scan':
          const variables = await this.scan();
          console.log('\nüìã Found environment variables:');
          variables.forEach(variable => {
            console.log(`   ‚Ä¢ ${variable.name} (${variable.source}:${variable.line})`);
          });
          break;
          
        case 'generate-template':
          await this.generateTemplate();
          break;
          
        case 'validate':
          await this.validate();
          break;
          
        default:
          console.error(`‚ùå Unknown command: ${command}`);
          this.showHelp();
          process.exit(1);
      }
    } catch (error) {
      console.error('‚ùå Agent error:', error);
      process.exit(1);
    }
  }
}

// Execute the agent
const agent = new ConfiguratorAgent();
agent.run().catch(error => {
  console.error('‚ùå Fatal error:', error);
  process.exit(1);
});
