#!/usr/bin/env ts-node

/**
 * AuraOS Environment Sharing Agent
 * Manages shared environment variables across multiple Git repositories
 * 
 * Commands:
 * - create: Create shared/.env.shared file
 * - pull <repo_path>: Pull variable names to specific repository
 * - sync: Sync to all repositories in config
 */

import * as fs from 'fs';
import * as path from 'path';

interface EnvShareConfig {
  repositories: string[];
  defaultValues: Record<string, string>;
}

class EnvShareAgent {
  private projectRoot: string;
  private sharedDir: string;
  private configPath: string;
  private sharedEnvPath: string;

  constructor() {
    this.projectRoot = process.cwd();
    this.sharedDir = path.join(this.projectRoot, 'shared');
    this.configPath = path.join(this.sharedDir, 'env-share.config.json');
    this.sharedEnvPath = path.join(this.sharedDir, '.env.shared');
  }

  /**
   * Create shared environment file
   */
  async create(): Promise<void> {
    console.log('üîß Creating shared environment file...');
    
    // Ensure shared directory exists
    if (!fs.existsSync(this.sharedDir)) {
      fs.mkdirSync(this.sharedDir, { recursive: true });
      console.log('üìÅ Created shared directory');
    }

    // Check if config exists
    if (!fs.existsSync(this.configPath)) {
      console.error('‚ùå Configuration file not found:', this.configPath);
      console.log('üí° Please create env-share.config.json in shared/ directory');
      process.exit(1);
    }

    // Read configuration
    const config: EnvShareConfig = JSON.parse(fs.readFileSync(this.configPath, 'utf-8'));
    
    // Create shared environment content
    let content = `# AuraOS Shared Environment Variables
# Generated by Environment Sharing Agent
# DO NOT commit sensitive values to this file
# Copy to your local .env and fill in actual values

`;
    
    // Add variables with default values
    Object.entries(config.defaultValues).forEach(([key, value]) => {
      content += `${key}="${value}"\n`;
    });
    
    // Write shared environment file
    fs.writeFileSync(this.sharedEnvPath, content);
    console.log(`‚úÖ Created shared environment file: ${this.sharedEnvPath}`);
    console.log(`üìä Added ${Object.keys(config.defaultValues).length} variables`);
  }

  /**
   * Pull environment variables to specific repository
   */
  async pull(repoPath: string): Promise<void> {
    console.log(`üì• Pulling environment variables to: ${repoPath}`);
    
    // Check if shared environment exists
    if (!fs.existsSync(this.sharedEnvPath)) {
      console.error('‚ùå Shared environment file not found');
      console.log('üí° Run: npm run env:share:create first');
      process.exit(1);
    }

    // Resolve repository path
    const targetRepoPath = path.resolve(repoPath);
    const targetEnvPath = path.join(targetRepoPath, '.env');
    
    // Check if target repository exists
    if (!fs.existsSync(targetRepoPath)) {
      console.error(`‚ùå Repository not found: ${targetRepoPath}`);
      process.exit(1);
    }

    // Read shared environment
    const sharedContent = fs.readFileSync(this.sharedEnvPath, 'utf-8');
    const sharedLines = sharedContent.split('\n');
    
    // Extract variable names and default values
    const sharedVars: Record<string, string> = {};
    sharedLines.forEach(line => {
      const trimmed = line.trim();
      if (trimmed && !trimmed.startsWith('#')) {
        const [key, ...valueParts] = trimmed.split('=');
        if (key && valueParts.length > 0) {
          const value = valueParts.join('=').replace(/^["']|["']$/g, '');
          sharedVars[key.trim()] = value;
        }
      }
    });

    // Read existing local .env if it exists
    let existingVars: Record<string, string> = {};
    if (fs.existsSync(targetEnvPath)) {
      const existingContent = fs.readFileSync(targetEnvPath, 'utf-8');
      const existingLines = existingContent.split('\n');
      
      existingLines.forEach(line => {
        const trimmed = line.trim();
        if (trimmed && !trimmed.startsWith('#')) {
          const [key, ...valueParts] = trimmed.split('=');
          if (key && valueParts.length > 0) {
            const value = valueParts.join('=').replace(/^["']|["']$/g, '');
            existingVars[key.trim()] = value;
          }
        }
      });
    }

    // Merge shared variables with existing ones
    // Shared variables take precedence for structure, but preserve existing values
    const mergedVars: Record<string, string> = { ...sharedVars };
    Object.entries(existingVars).forEach(([key, value]) => {
      if (sharedVars.hasOwnProperty(key)) {
        // Keep existing value if it's not a default placeholder
        if (!value.startsWith('SET_YOUR_') && value !== sharedVars[key]) {
          mergedVars[key] = value;
        }
      } else {
        // Keep local-only variables
        mergedVars[key] = value;
      }
    });

    // Create new .env content
    let newContent = `# Environment Variables for ${path.basename(targetRepoPath)}
# Generated by AuraOS Environment Sharing Agent
# Update values as needed for your environment

`;
    
    Object.entries(mergedVars).forEach(([key, value]) => {
      newContent += `${key}="${value}"\n`;
    });

    // Write to target repository
    fs.writeFileSync(targetEnvPath, newContent);
    console.log(`‚úÖ Updated .env in ${repoPath}`);
    console.log(`üìä Total variables: ${Object.keys(mergedVars).length}`);
  }

  /**
   * Sync environment variables to all repositories
   */
  async sync(): Promise<void> {
    console.log('üîÑ Syncing environment variables to all repositories...');
    
    // Check if config exists
    if (!fs.existsSync(this.configPath)) {
      console.error('‚ùå Configuration file not found:', this.configPath);
      process.exit(1);
    }

    // Read configuration
    const config: EnvShareConfig = JSON.parse(fs.readFileSync(this.configPath, 'utf-8'));
    
    // Check if shared environment exists
    if (!fs.existsSync(this.sharedEnvPath)) {
      console.error('‚ùå Shared environment file not found');
      console.log('üí° Run: npm run env:share:create first');
      process.exit(1);
    }

    console.log(`üìã Found ${config.repositories.length} repositories to sync`);
    
    // Sync to each repository
    for (const repo of config.repositories) {
      try {
        await this.pull(repo);
      } catch (error) {
        console.warn(`‚ö†Ô∏è  Failed to sync to ${repo}:`, error);
      }
    }
    
    console.log('‚úÖ Environment sync completed');
  }

  /**
   * Show help information
   */
  private showHelp(): void {
    console.log(`
üåê AuraOS Environment Sharing Agent

Usage: npx ts-node ./scripts/env-share-agent.ts <command> [options]

Commands:
  create              Create shared/.env.shared file
  pull <repo_path>     Pull variables to specific repository
  sync                Sync to all repositories in config

Examples:
  npm run env:share:create                    # Create shared file
  npm run env:share:sync                       # Sync to all repos
  npx ts-node ./scripts/env-share-agent.ts pull ../auraos-frontend

Security: Only variable names are shared, values are set to placeholders.
`);
  }

  /**
   * Main execution method
   */
  async run(): Promise<void> {
    const command = process.argv[2];
    
    if (!command || command === 'help') {
      this.showHelp();
      return;
    }

    try {
      switch (command) {
        case 'create':
          await this.create();
          break;
          
        case 'pull':
          const repoPath = process.argv[3];
          if (!repoPath) {
            console.error('‚ùå Repository path required for pull command');
            console.log('Usage: npm run env:share:pull <repo_path>');
            process.exit(1);
          }
          await this.pull(repoPath);
          break;
          
        case 'sync':
          await this.sync();
          break;
          
        default:
          console.error(`‚ùå Unknown command: ${command}`);
          this.showHelp();
          process.exit(1);
      }
    } catch (error) {
      console.error('‚ùå Share agent error:', error);
      process.exit(1);
    }
  }
}

// Execute the agent
const agent = new EnvShareAgent();
agent.run().catch(error => {
  console.error('‚ùå Fatal error:', error);
  process.exit(1);
});
