import js from '@eslint/js';
import typescript from '@typescript-eslint/eslint-plugin';
import typescriptParser from '@typescript-eslint/parser';
import react from 'eslint-plugin-react';
import reactHooks from 'eslint-plugin-react-hooks';
import prettier from 'eslint-plugin-prettier';

export default [
  js.configs.recommended,
  {
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      parser: typescriptParser,
      parserOptions: {
        ecmaFeatures: {
          jsx: true,
        },
        ecmaVersion: 'latest',
        sourceType: 'module',
      },
      globals: {
        console: 'readonly',
        process: 'readonly',
        Buffer: 'readonly',
        __dirname: 'readonly',
        __filename: 'readonly',
        global: 'readonly',
        window: 'readonly',
        document: 'readonly',
        navigator: 'readonly',
        localStorage: 'readonly',
        sessionStorage: 'readonly',
        setTimeout: 'readonly',
        clearTimeout: 'readonly',
        setInterval: 'readonly',
        clearInterval: 'readonly',
        fetch: 'readonly',
        performance: 'readonly',
        URL: 'readonly',
        URLSearchParams: 'readonly',
        Headers: 'readonly',
        Request: 'readonly',
        Response: 'readonly',
        FormData: 'readonly',
        File: 'readonly',
        Blob: 'readonly',
        WebSocket: 'readonly',
        screen: 'readonly',
        vi: 'readonly',
        describe: 'readonly',
        it: 'readonly',
        test: 'readonly',
        expect: 'readonly',
        beforeEach: 'readonly',
        afterEach: 'readonly',
        beforeAll: 'readonly',
        afterAll: 'readonly',
        jest: 'readonly',
        React: 'readonly',
        useState: 'readonly',
        useEffect: 'readonly',
        useCallback: 'readonly',
        useMemo: 'readonly',
        useRef: 'readonly',
        useContext: 'readonly',
        useReducer: 'readonly',
        useLayoutEffect: 'readonly',
        useImperativeHandle: 'readonly',
        useDebugValue: 'readonly',
        NodeJS: 'readonly',
        db: 'readonly',
        doc: 'readonly',
        getDoc: 'readonly',
        setDoc: 'readonly',
        addDoc: 'readonly',
        updateDoc: 'readonly',
        deleteDoc: 'readonly',
        collection: 'readonly',
        query: 'readonly',
        where: 'readonly',
        orderBy: 'readonly',
        limit: 'readonly',
        getDocs: 'readonly',
        onSnapshot: 'readonly',
        writeBatch: 'readonly',
        startAfter: 'readonly',
        increment: 'readonly',
      },
    },
    plugins: {
      '@typescript-eslint': typescript,
      react,
      'react-hooks': reactHooks,
      prettier,
    },
    rules: {
      ...typescript.configs.recommended.rules,
      ...react.configs.recommended.rules,
      ...reactHooks.configs.recommended.rules,
      'prettier/prettier': 'error',
      'react/react-in-jsx-scope': 'off',
      'react/prop-types': 'off',
      'react/jsx-no-undef': 'off',
      'react/no-unescaped-entities': 'off',
      '@typescript-eslint/no-unused-vars': ['error', { argsIgnorePattern: '^_' }],
      '@typescript-eslint/no-explicit-any': 'warn',
      'no-console': ['warn', { allow: ['warn', 'error'] }],
      'prefer-const': 'error',
      'no-var': 'error',
      '@typescript-eslint/no-require-imports': 'off',
      '@typescript-eslint/no-unused-expressions': 'off',
      'no-useless-escape': 'off',
      'no-self-assign': 'off',
      'no-unreachable': 'off',
    },
    settings: {
      react: {
        version: 'detect',
      },
    },
  },
  {
    files: ['client/**/*.{ts,tsx}'],
    languageOptions: {
      globals: {
        console: 'readonly',
        window: 'readonly',
        document: 'readonly',
        navigator: 'readonly',
        localStorage: 'readonly',
        sessionStorage: 'readonly',
        setTimeout: 'readonly',
        clearTimeout: 'readonly',
        setInterval: 'readonly',
        clearInterval: 'readonly',
        fetch: 'readonly',
        performance: 'readonly',
        URL: 'readonly',
        URLSearchParams: 'readonly',
        Headers: 'readonly',
        Request: 'readonly',
        Response: 'readonly',
        FormData: 'readonly',
        File: 'readonly',
        Blob: 'readonly',
        WebSocket: 'readonly',
        screen: 'readonly',
        React: 'readonly',
        useState: 'readonly',
        useEffect: 'readonly',
        useCallback: 'readonly',
        useMemo: 'readonly',
        useRef: 'readonly',
        useContext: 'readonly',
        useReducer: 'readonly',
        useLayoutEffect: 'readonly',
        useImperativeHandle: 'readonly',
        useDebugValue: 'readonly',
        db: 'readonly',
        doc: 'readonly',
        getDoc: 'readonly',
        setDoc: 'readonly',
        addDoc: 'readonly',
        updateDoc: 'readonly',
        deleteDoc: 'readonly',
        collection: 'readonly',
        query: 'readonly',
        where: 'readonly',
        orderBy: 'readonly',
        limit: 'readonly',
        getDocs: 'readonly',
        onSnapshot: 'readonly',
        writeBatch: 'readonly',
        startAfter: 'readonly',
        increment: 'readonly',
      },
    },
  },
  {
    ignores: [
      'dist/',
      'node_modules/',
      '*.config.js',
      '*.config.ts',
      'client/dist/',
      'test-*.js',
      'test-*.cjs',
      'test-*.mjs',
      'test-*.ts',
      '*.cjs',
      '*.mjs',
      'server/**/*',
      'auraos-automation/**/*',
      'auraos-dev-1/**/*',
      'auraos-mcp/**/*',
      'client/src/components/ui/*.tsx',
      'client/src/hooks/*.tsx',
      'client/src/lib/*.tsx',
      'client/src/pages/*.tsx',
      'client/src/routes.tsx',
    ],
  },
];
