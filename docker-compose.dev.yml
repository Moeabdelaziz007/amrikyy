# Docker Compose for A2A System Development
# نظام Docker Compose لتطوير نظام A2A

version: '3.8'

services:
  # Redis - للذاكرة المؤقتة والجلسات
  redis:
    image: redis:7-alpine
    container_name: a2a-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # RabbitMQ - لإدارة الرسائل
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: a2a-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
      RABBITMQ_DEFAULT_VHOST: /
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway - بوابة API الرئيسية
  api-gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    container_name: a2a-gateway
    ports:
      - "3001:3001"
      - "3004:3004"  # WebSocket port
    environment:
      NODE_ENV: development
      PORT: 3001
      HOST: 0.0.0.0
      JWT_SECRET: auraos-a2a-super-secret-key-change-in-production
      JWT_EXPIRES_IN: 24h
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
      RABBITMQ_URL: amqp://admin:admin123@rabbitmq:5672
      RABBITMQ_EXCHANGE: a2a_events
      RABBITMQ_QUEUE_PREFIX: a2a
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 1000
      LOG_LEVEL: info
      LOG_FORMAT: json
      ENABLE_METRICS: true
      METRICS_PORT: 9090
      ALLOWED_ORIGINS: http://localhost:3000,http://localhost:3001,http://localhost:3002
      WS_PORT: 3004
      WS_PATH: /ws/a2a
      WEBHOOK_SECRET: default-webhook-secret-change-me
    volumes:
      - ./gateway:/app
      - /app/node_modules
      - ./logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Autopilot Service - خدمة الأوتوبيلوت
  autopilot-service:
    build:
      context: ./autopilot
      dockerfile: Dockerfile
    container_name: a2a-autopilot
    ports:
      - "3002:3002"
    environment:
      NODE_ENV: development
      PORT: 3002
      HOST: 0.0.0.0
      GATEWAY_URL: http://api-gateway:3001
      REDIS_HOST: redis
      REDIS_PORT: 6379
      RABBITMQ_URL: amqp://admin:admin123@rabbitmq:5672
      LOG_LEVEL: info
      MAX_CONCURRENT_TASKS: 10
      TASK_TIMEOUT: 300000
    volumes:
      - ./autopilot:/app
      - /app/node_modules
    depends_on:
      - redis
      - rabbitmq
      - api-gateway
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Telegram Bot - بوت تيليجرام
  telegram-bot:
    build:
      context: ./telegram_bot
      dockerfile: Dockerfile
    container_name: a2a-telegram-bot
    ports:
      - "3003:3003"
    environment:
      NODE_ENV: development
      PORT: 3003
      HOST: 0.0.0.0
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      GATEWAY_URL: http://api-gateway:3001
      WEBHOOK_URL: ${TELEGRAM_WEBHOOK_URL}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      RABBITMQ_URL: amqp://admin:admin123@rabbitmq:5672
      LOG_LEVEL: info
      RATE_LIMIT_MESSAGES_PER_MINUTE: 30
      RATE_LIMIT_COMMANDS_PER_MINUTE: 10
    volumes:
      - ./telegram_bot:/app
      - /app/node_modules
    depends_on:
      - redis
      - rabbitmq
      - api-gateway
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB - قاعدة البيانات الرئيسية
  mongodb:
    image: mongo:7
    container_name: a2a-mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin123
      MONGO_INITDB_DATABASE: auraos_a2a
    volumes:
      - mongodb_data:/data/db
      - ./mongodb/init:/docker-entrypoint-initdb.d
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus - مراقبة المقاييس
  prometheus:
    image: prom/prometheus:latest
    container_name: a2a-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    depends_on:
      - api-gateway

  # Grafana - لوحة تحكم المراقبة
  grafana:
    image: grafana/grafana:latest
    container_name: a2a-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    restart: unless-stopped
    depends_on:
      - prometheus

  # Nginx - Load Balancer
  nginx:
    image: nginx:alpine
    container_name: a2a-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api-gateway
      - autopilot-service
      - telegram-bot
    restart: unless-stopped

  # Test Application - تطبيق اختبار
  test-app:
    build:
      context: ./test-app
      dockerfile: Dockerfile
    container_name: a2a-test-app
    ports:
      - "3005:3005"
    environment:
      NODE_ENV: development
      PORT: 3005
      GATEWAY_URL: http://api-gateway:3001
      API_KEY: ${TEST_API_KEY}
    volumes:
      - ./test-app:/app
      - /app/node_modules
    depends_on:
      - api-gateway
    restart: unless-stopped

volumes:
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  mongodb_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  default:
    name: a2a-network
    driver: bridge
