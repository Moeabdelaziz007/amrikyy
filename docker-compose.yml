version: '3.8'

services:
  # Core Services
  redis:
    image: redis:7.2-alpine
    container_name: auraos-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: auraos-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:10.2.0
    container_name: auraos-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus

  # Database (pgvector)
  postgres:
    image: ankane/pgvector:latest
    container_name: auraos-postgres
    environment:
      - POSTGRES_DB=auraos_automation
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d auraos_automation"]
      interval: 10s
      timeout: 5s
      retries: 10

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:v1.6.1
    container_name: auraos-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'

  # AuraOS Development Server
  auraos-server:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: auraos-server
    ports:
      - "3000:3000"
      - "3001:3001"
      - "3002:3002"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - FRONTEND_URL=http://localhost:3000
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/auraos_automation
      - REDIS_URL=redis://redis:6379
    volumes:
      - .:/workspace
      - /workspace/node_modules
    depends_on:
      - postgres
      - redis
    command: ["npm", "run", "dev"]

  # AuraOS Services
  conversational-core:
    build:
      context: .
      dockerfile: services/templates/conversational-core/Dockerfile
    container_name: auraos-conversational-core
    ports:
      - "8001:8000"
    environment:
      - REDIS_URL=redis://redis:6379
      - PROMETHEUS_PORT=8000
    depends_on:
      - redis
      - prometheus
    volumes:
      - ./services/templates/conversational-core:/app
    command: ["python", "run.py"]

  file-organizer:
    build:
      context: .
      dockerfile: services/templates/file-organizer/Dockerfile
    container_name: auraos-file-organizer
    ports:
      - "8002:8000"
    environment:
      - REDIS_URL=redis://redis:6379
      - PROMETHEUS_PORT=8000
    depends_on:
      - redis
      - prometheus
    volumes:
      - ./services/templates/file-organizer:/app
    command: ["python", "run.py"]

  ide-agent:
    build:
      context: .
      dockerfile: services/templates/ide-agent/Dockerfile
    container_name: auraos-ide-agent
    ports:
      - "8003:8000"
    environment:
      - REDIS_URL=redis://redis:6379
      - PROMETHEUS_PORT=8000
    depends_on:
      - redis
      - prometheus
    volumes:
      - ./services/templates/ide-agent:/app
    command: ["python", "run.py"]

  # AI Orchestrator
  ai-orchestrator:
    build:
      context: ./services/ai-orchestrator
    container_name: auraos-ai-orchestrator
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/auraos_automation
    ports:
      - "8081:8081"
    depends_on:
      postgres:
        condition: service_healthy

  # Development Services
  nginx:
    image: nginx:alpine
    container_name: auraos-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - conversational-core
      - file-organizer
      - ide-agent

volumes:
  redis_data:
  prometheus_data:
  grafana_data:
  pg_data:

networks:
  default:
    name: auraos-network